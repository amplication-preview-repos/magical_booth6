/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Infographic } from "./Infographic";
import { InfographicCountArgs } from "./InfographicCountArgs";
import { InfographicFindManyArgs } from "./InfographicFindManyArgs";
import { InfographicFindUniqueArgs } from "./InfographicFindUniqueArgs";
import { CreateInfographicArgs } from "./CreateInfographicArgs";
import { UpdateInfographicArgs } from "./UpdateInfographicArgs";
import { DeleteInfographicArgs } from "./DeleteInfographicArgs";
import { InfographicService } from "../infographic.service";
@graphql.Resolver(() => Infographic)
export class InfographicResolverBase {
  constructor(protected readonly service: InfographicService) {}

  async _infographicsMeta(
    @graphql.Args() args: InfographicCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Infographic])
  async infographics(
    @graphql.Args() args: InfographicFindManyArgs
  ): Promise<Infographic[]> {
    return this.service.infographics(args);
  }

  @graphql.Query(() => Infographic, { nullable: true })
  async infographic(
    @graphql.Args() args: InfographicFindUniqueArgs
  ): Promise<Infographic | null> {
    const result = await this.service.infographic(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Infographic)
  async createInfographic(
    @graphql.Args() args: CreateInfographicArgs
  ): Promise<Infographic> {
    return await this.service.createInfographic({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Infographic)
  async updateInfographic(
    @graphql.Args() args: UpdateInfographicArgs
  ): Promise<Infographic | null> {
    try {
      return await this.service.updateInfographic({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Infographic)
  async deleteInfographic(
    @graphql.Args() args: DeleteInfographicArgs
  ): Promise<Infographic | null> {
    try {
      return await this.service.deleteInfographic(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
